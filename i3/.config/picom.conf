# Fading
fading = true;                  # Fade windows during opacity changes.
fade-delta = 12;                # The time between steps in a fade in milliseconds. (default 10).
fade-in-step = 0.15;            # Opacity change between steps while fading in. (default 0.028).
fade-out-step = 0.15;           # Opacity change between steps while fading out. (default 0.03).
no-fading-openclose = false; 	# Fade windows in/out when opening/closing.

# Focus rules
mark-wmwin-focused = true;
mark-ovredir-focused = false;

# Opacity
inactive-opacity = 0.7;
# active-opacity = 0.8;
frame-opacity = 0.6;
inactive-opacity-override = true;
# alpha-step = 0.06;
# inactive-dim = 0.2;
# inactive-dim-fixed = true;

# Backend to use: "xrender" or "glx".
# GLX backend is typically much faster but depends on a sane driver.
backend = "glx"; # for kawese blur

#################################
#
# GLX backend
#
#################################

# GLX backend: Avoid using stencil buffer, useful if you donâ€™t have a stencil buffer. Might
# cause incorrect opacity when rendering transparent content (but never practically happened)
# and may not work with --blur-background. My tests show a 15% performance boost.
# Recommended
glx-no-stencil = true;

# GLX backend: Copy unmodified regions from front buffer instead of redrawing them all.
# My tests with nvidia-drivers show a 10% decrease in performance when the whole screen is modified,
# but a 20% increase when only 1/4 is.
# My tests on nouveau show terrible slowdown.
# Useful with --glx-swap-method, as well.
glx-copy-from-front = false;

# GLX backend: Use MESA_copy_sub_buffer to do partial screen update.
# My tests on nouveau shows a 200% performance boost when only 1/4 of the screen is updated.
# May break VSync and is not available on some drivers.
# Overrides --glx-copy-from-front.
glx-use-copysubbuffermesa = true;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes, but is known to break things on some drivers (LLVMpipe).
# Recommended if it works.
glx-no-rebind-pixmap = true;

# GLX backend: GLX buffer swap method we assume.
# Could be undefined (0), copy (1), exchange (2), 3-6, or buffer-age (-1).
# undefined is the slowest and the safest, and the default value.
# copy is fastest, but may fail on some drivers,
# 2-6 are gradually slower but safer (6 is still faster than 0).
# Usually, double buffer means 2, triple buffer means 3.
# buffer-age means auto-detect using GLX_EXT_buffer_age, supported by some drivers.
# Useless with --glx-use-copysubbuffermesa.
# Partially breaks --resize-damage.
# Defaults to undefined.
#glx-swap-method = "undefined";
use-damage = true

# Rounded corners
# NOTE: currently only supported in xrender backend
corner-radius = 5;

# Blur
blur-background = true;
blur-background-frame = true;
#blur-background-fixed = true;
blur-method = "dual_kawase";
blur-strength = 5;
#blur-kern = "3x3box";
#blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
#blur-background-exclude = [
#	"window_type = 'dock'",
#	"window_type = 'desktop'",
#	"_GTK_FRAME_EXTENTS@:c"
#];
# opacity-rule = [ "80:class_g = 'URxvt'" ];
opacity-rule = [
  "0:_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'"
];

focus-exclude = [ "name *?= 'i3lock'" ];

# Window type settings
#
# 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard:
#     "unknown", "desktop", "dock", "toolbar", "menu", "utility",
#     "splash", "dialog", "normal", "dropdown_menu", "popup_menu",
#     "tooltip", "notification", "combo", and "dnd".
#
# Following per window-type options are available: ::
#
#   fade, shadow:::
#     Controls window-type-specific shadow and fade settings.
#
#   opacity:::
#     Controls default opacity of the window type.
#
#   focus:::
#     Controls whether the window of this type is to be always considered focused.
#     (By default, all window types except "normal" and "dialog" has this on.)
#
#   full-shadow:::
#     Controls whether shadow is drawn under the parts of the window that you
#     normally won't be able to see. Useful when the window has parts of it
#     transparent, and you want shadows in those areas.
#
#   redir-ignore:::
#     Controls whether this type of windows should cause screen to become
#     redirected again after been unredirected. If you have unredir-if-possible
#     set, and doesn't want certain window to cause unnecessary screen redirection,
#     you can set this to `true`.
#
wintypes:
{
  tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
  dock = { shadow = false; }
  dnd = { shadow = false; }
  popup_menu = { opacity = 0.8; }
  dropdown_menu = { opacity = 0.8; }
};
